def rabin_karp(s, length, base=256, mod=10**9+7):
    n = len(s)
    if n < length:
        return {}

    # 부분 문자열의 해시값을 저장할 딕셔너리
    hash_map = {}
    
    # 초기 해시값 계산 (첫 번째 length 길이 부분 문자열)
    hash_value = 0
    for i in range(length):
        hash_value = (hash_value * base + ord(s[i])) % mod
    
    # 첫 번째 부분 문자열의 해시값을 기록
    hash_map[hash_value] = [0]
    
    # base^(length-1) 값을 미리 계산해둔다. (슬라이딩 윈도우에서 필요)
    base_power = pow(base, length - 1, mod)
    
    # 나머지 부분 문자열들의 해시값 계산
    for i in range(1, n - length + 1):
        # 슬라이딩 윈도우 방식으로 해시값 갱신
        hash_value = (hash_value - ord(s[i - 1]) * base_power) % mod  # 윈도우의 첫 문자를 뺌
        hash_value = (hash_value * base + ord(s[i + length - 1])) % mod  # 윈도우에 새로운 문자를 더함
        
        if hash_value not in hash_map:
            hash_map[hash_value] = []
        hash_map[hash_value].append(i)
    
    return hash_map

def find_unique_substring(s):
    n = len(s)
    
    # 최소 길이부터 시작해서 고유한 부분 문자열을 찾는다.
    for length in range(1, n + 1):
        hash_map = rabin_karp(s, length)
        
        # 고유한 부분 문자열 찾기
        for key, indices in hash_map.items():
            if len(indices) == 1:  # 고유한 해시값을 가진 부분 문자열을 찾은 경우
                # 해당 부분 문자열이 유일하므로 첫 번째 인덱스를 기준으로 결과 출력
                return s[indices[0]:indices[0] + length]
    
    return ""  # 만약 찾지 못한 경우

# 입력 받기
s = input().strip()

# 결과 출력
print(find_unique_substring(s))
