def rabin_karp(s, p, prime=101):
    n = len(s)
    m = len(p)
    d = 256  # 문자 집합 크기 (ASCII)

    if m > n:
        return 0  # 패턴 길이가 텍스트보다 크면 매칭 불가능

    pattern_hash = 0
    text_hash = 0
    h = 1

    # h 값 계산: d^(m-1) % prime
    for i in range(m - 1):
        h = (h * d) % prime

    # 패턴과 텍스트 첫 윈도우 해시값 계산
    for i in range(m):
        pattern_hash = (d * pattern_hash + ord(p[i])) % prime
        text_hash = (d * text_hash + ord(s[i])) % prime

    # 텍스트 탐색
    for i in range(n - m + 1):
        # 해시값이 같으면 실제 문자열 비교
        if pattern_hash == text_hash:
            if s[i:i + m] == p:
                return 1  # 부분 문자열 발견

        # 다음 윈도우 해시값 계산
        if i < n - m:
            text_hash = (d * (text_hash - ord(s[i]) * h) + ord(s[i + m])) % prime
            if text_hash < 0:
                text_hash += prime

    return 0  # 부분 문자열 없음


# 입력 처리
import sys
input = sys.stdin.read
data = input().split()

# 예외 처리: 입력이 충분하지 않은 경우
if len(data) < 2:
    print(0)
else:
    S = data[0]  # 문자열 S
    P = data[1]  # 문자열 P

    # Rabin-Karp 실행 및 결과 출력
    print(rabin_karp(S, P))
